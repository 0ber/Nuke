{"name":"Nuke","tagline":"Image loading, processing, caching and preheating","body":"<p align=\"center\"><img src=\"https://cloud.githubusercontent.com/assets/1567433/10440878/a7c6e468-714b-11e5-9b12-baef482c37c1.png\" height=\"100\"/>\r\n\r\n<p align=\"center\">\r\n<a href=\"https://cocoapods.org\"><img src=\"https://img.shields.io/cocoapods/v/Nuke.svg\"></a>\r\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\"></a>\r\n<a href=\"http://cocoadocs.org/docsets/Nuke\"><img src=\"https://img.shields.io/cocoapods/p/Nuke.svg?style=flat)\"></a>\r\n</p>\r\n\r\n<p align=\"center\">\r\nAdvanced Swift framework for loading, processing, caching, displaying and preheating images.\r\n</p>\r\n\r\n```swift\r\nvar request = ImageRequest(URLRequest: <#NSURLRequest#>)\r\nrequest.targetSize = CGSize(width: 200, height: 200) // Resize image\r\nrequest.processor = <#ImageProcessing#> // Apply image filters\r\n\r\nNuke.taskWithRequest(request) { response in\r\n    let image = response.image \r\n}.resume()\r\n```\r\n\r\n1. [Requirements](#h_requirements)\r\n2. [Getting Started](#h_getting_started)\r\n3. [Usage](#h_usage)\r\n4. [Design](#h_design)\r\n5. [Installation](#installation)\r\n6. [Satellite Projects](#h_satellite_projects)\r\n\r\n## <a name=\"h_features\"></a>Features\r\n\r\n- Zero config & user-friendly\r\n- Performant, asynchronous, thread safe\r\n- Optional [Alamofire](https://github.com/kean/Nuke-Alamofire-Plugin) and [AnimatedImage](https://github.com/kean/Nuke-AnimatedImage-Plugin) plugins\r\n- Nuke is a [pipeline](#h_design) that loads images using injectable dependencies\r\n- Beautiful [playground](https://cloud.githubusercontent.com/assets/1567433/10491357/057ac246-72af-11e5-9c60-6f30e0ea9d52.png),  [complete documentation](http://cocoadocs.org/docsets/Nuke) and [wiki](https://github.com/kean/Nuke/wiki) included\r\n\r\n##### Loading\r\n- Uses [NSURLSession](https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSession_class/) with [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) support\r\n- Uses a single data task for multiple equivalent requests\r\n- [Automated preheating](https://github.com/kean/Nuke/wiki/Image-Preheating-Guide) of images close to the viewport\r\n- Full featured extensions for UI components\r\n\r\n##### Caching\r\n- Doesn't reinvent caching, relies on [HTTP cache](https://tools.ietf.org/html/rfc7234) and its implementation in [Foundation](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html)\r\n- Caching is transparent to the client\r\n- Two cache layers including [auto purging memory cache](https://github.com/kean/Nuke/wiki/Image-Caching-Guide)\r\n\r\n##### Processing\r\n- Create, compose and apply image filters\r\n- Background image decompression and scaling in a single step\r\n- Resize loaded images to [fit displayed size](https://developer.apple.com/library/ios/qa/qa1708/_index.html)\r\n\r\n## <a name=\"h_requirements\"></a>[Requirements](https://github.com/kean/Nuke/wiki/Supported-Platforms)\r\n- iOS 8.0+ / watchOS 2.0+ / OS X 10.9+ / tvOS 9.0+\r\n- Xcode 7.1+, Swift 2.0+\r\n\r\n## <a name=\"h_getting_started\"></a>Getting Started\r\n- Get a demo project using `pod try Nuke` command\r\n- Experiment with Nuke in a [playground](https://cloud.githubusercontent.com/assets/1567433/10491357/057ac246-72af-11e5-9c60-6f30e0ea9d52.png)\r\n- [Install](#installation), `import Nuke` and enjoy!\r\n\r\n## <a name=\"h_usage\"></a>Usage\r\n\r\n#### Zero Config\r\n\r\n```swift\r\nNuke.taskWithURL(imageURL) {\r\n    let image = $0.image\r\n}.resume()\r\n```\r\n\r\n#### Adding Request Options\r\n\r\n```swift\r\nvar request = ImageRequest(URLRequest: <#NSURLRequest#>)\r\nrequest.targetSize = CGSize(width: 300.0, height: 400.0) // Set target size in pixels\r\nrequest.contentMode = .AspectFill\r\n\r\nNuke.taskWithRequest(request) {\r\n    let image = $0.image // Image is resized\r\n}.resume()\r\n```\r\n\r\n#### Using Image Response\r\n\r\n```swift\r\nNuke.taskWithRequest(request) { response in\r\n    switch response {\r\n    case let .Success(image, info): \r\n        // Use image and inspect info\r\n    case let .Failure(error): \r\n        // Handle error\r\n    }\r\n}.resume()\r\n```\r\n\r\n#### Using Image Task\r\n\r\n```swift\r\nlet task = Nuke.taskWithURL(imageURL).resume()\r\ntask.progress = { completed, total in\r\n   // Update progress\r\n}\r\nlet state = task.state // Track task state\r\ntask.completion { // Add multiple completions, even for completed task\r\n    let image = $0.image\r\n}\r\ntask.cancel()\r\n```\r\n\r\n#### Using UI Extensions\r\n\r\n```swift\r\nlet imageView = UIImageView()\r\n// let task = imageView.nk_setImageWithURL(<#NSURL#>)\r\nlet task = imageView.nk_setImageWithRequest(<#ImageRequest#>, options: <#ImageViewLoadingOptions?#>)\r\n```\r\n\r\n#### Adding UI Extensions\r\n\r\nNuke makes it extremely easy to add full-featured image loading extensions to UI components\r\n```swift\r\nextension MKAnnotationView: ImageDisplayingView, ImageLoadingView {\r\n    // That's it, you get default implementation of all methods in ImageLoadingView protocol\r\n    public var nk_image: UIImage? {\r\n        get { return self.image }\r\n        set { self.image = newValue }\r\n    }\r\n}\r\n```\r\n\r\n#### UICollectionView\r\n\r\n```swift\r\nfunc collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\r\n    let cell = collectionView.dequeueReusableCellWithReuseIdentifier(cellReuseID, forIndexPath: indexPath)\r\n    let imageView: ImageView = <#view#>\r\n    imageView.nk_prepareForReuse()\r\n    imageView.nk_setImageWithURL(imageURL)\r\n    return cell\r\n}\r\n```\r\n\r\nCancel image task as soon as the cell goes offscreen (optional):\r\n\r\n```swift\r\nfunc collectionView(collectionView: UICollectionView, didEndDisplayingCell cell: UICollectionViewCell, forItemAtIndexPath indexPath: NSIndexPath) {\r\n    let imageView: ImageView = <#view#>\r\n    imageView.nk_prepareForReuse()\r\n}\r\n```\r\n\r\n#### Applying Filters\r\n\r\n```swift\r\nlet filter1: ImageProcessing = <#filter#>\r\nlet filter2: ImageProcessing = <#filter#>\r\nlet filterComposition = ImageProcessorComposition(processors: [filter1, filter2])\r\n\r\nvar request = ImageRequest(URL: <#image_url#>)\r\nrequest.processor = filterComposition\r\n\r\nNuke.taskWithRequest(request) {\r\n    // Filters are applied, filtered image is stored in memory cache\r\n    let image = $0.image\r\n}.resume()\r\n```\r\n\r\n#### Composing Filters\r\n\r\n```swift\r\nlet processor1: ImageProcessing = <#processor#>\r\nlet processor2: ImageProcessing = <#processor#>\r\nlet composition = ImageProcessorComposition(processors: [processor1, processor2])\r\n```\r\n\r\n#### Preheating Images\r\n\r\n```swift\r\nlet requests = [ImageRequest(URL: imageURL1), ImageRequest(URL: imageURL2)]\r\nNuke.startPreheatingImages(requests: requests)\r\nNuke.stopPreheatingImages(requests: requests)\r\n```\r\n\r\n#### Automate Preheating\r\n\r\n```swift\r\nlet preheater = ImagePreheatingControllerForCollectionView(collectionView: <#collectionView#>)\r\npreheater.delegate = self // Signals when preheat window changes\r\n```\r\n\r\n#### Customizing Image Manager\r\n\r\n```swift\r\nlet dataLoader: ImageDataLoading = <#dataLoader#>\r\nlet decoder: ImageDecoding = <#decoder#>\r\nlet cache: ImageMemoryCaching = <#cache#>\r\n\r\nlet configuration = ImageManagerConfiguration(dataLoader: dataLoader, decoder: decoder, cache: cache)\r\nImageManager.shared = ImageManager(configuration: configuration)\r\n```\r\n\r\n## <a name=\"h_design\"></a>Design\r\n\r\n<img src=\"https://cloud.githubusercontent.com/assets/1567433/9952711/971ae2ea-5de1-11e5-8670-6853d3fe18cd.png\" width=\"66%\"/>\r\n\r\n|Protocol|Description|\r\n|--------|-----------|\r\n|`ImageManager`|A top-level API for managing images|\r\n|`ImageDataLoading`|Performs loading of image data (`NSData`)|\r\n|`ImageDecoding`|Converts `NSData` to `UIImage` objects|\r\n|`ImageProcessing`|Processes decoded images|\r\n|`ImageMemoryCaching`|Stores processed images into memory cache|\r\n\r\n## Installation<a name=\"installation\"></a>\r\n\r\n### [CocoaPods](http://cocoapods.org)\r\n\r\nTo install Nuke add a dependency to your Podfile:\r\n```ruby\r\n# source 'https://github.com/CocoaPods/Specs.git'\r\n# use_frameworks!\r\n# platform :ios, \"8.0\" / :watchos, \"2.0\" / :osx, \"10.9\" / :tvos, \"9.0\"\r\n\r\npod \"Nuke\"\r\npod \"Nuke-Alamofire-Plugin\" # optional\r\npod \"Nuke-AnimatedImage-Plugin\" # optional\r\n```\r\n\r\n### [Carthage](https://github.com/Carthage/Carthage)\r\n\r\nTo install Nuke add a dependency to your Cartfile:\r\n```\r\ngithub \"kean/Nuke\"\r\ngithub \"kean/Nuke-Alamofire-Plugin\" # optional\r\ngithub \"Nuke-AnimatedImage-Plugin\" # optional\r\n```\r\n\r\n### Import\r\n\r\nImport installed modules in your source files\r\n```swift\r\nimport Nuke\r\nimport NukeAlamofirePlugin\r\nimport NukeAnimatedImagePlugin\r\n```\r\n\r\n## <a name=\"h_satellite_projects\"></a>Satellite Projects\r\n\r\n- [Nuke Alamofire Plugin](https://github.com/kean/Nuke-Alamofire-Plugin) - Alamofire plugin for Nuke that allows you to use Alamofire for networking\r\n- [Nuke AnimatedImage Plugin](https://github.com/kean/Nuke-AnimatedImage-Plugin) - FLAnimatedImage plugin for Nuke that allows you to load and display animated GIFs\r\n- [Nuke Integration Tests](https://github.com/kean/Nuke-Integration-Tests) - Contains CocoaPods and Carthage integration tests for Nuke\r\n\r\n## Contacts\r\n\r\n<a href=\"https://github.com/kean\">\r\n<img src=\"https://cloud.githubusercontent.com/assets/1567433/6521218/9c7e2502-c378-11e4-9431-c7255cf39577.png\" height=\"44\" hspace=\"2\"/>\r\n</a>\r\n<a href=\"https://twitter.com/a_grebenyuk\">\r\n<img src=\"https://cloud.githubusercontent.com/assets/1567433/6521243/fb085da4-c378-11e4-973e-1eeeac4b5ba5.png\" height=\"44\" hspace=\"2\"/>\r\n</a>\r\n<a href=\"https://www.linkedin.com/pub/alexander-grebenyuk/83/b43/3a0\">\r\n<img src=\"https://cloud.githubusercontent.com/assets/1567433/6521256/20247bc2-c379-11e4-8e9e-417123debb8c.png\" height=\"44\" hspace=\"2\"/>\r\n</a>\r\n\r\n## License\r\n\r\nNuke is available under the MIT license. See the LICENSE file for more info.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}