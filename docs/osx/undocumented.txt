ImageLoadingView.swift
	public struct ImageViewLoadingOptions
	public var handler: ((ImageLoadingView, ImageTask, ImageResponse, ImageViewLoadingOptions) -> Void)? = nil
	public init() {}
	public typealias View = NSView
	var nk_image: Image? { get set }
	public func nk_setImageWith(request: ImageRequest, options: ImageViewLoadingOptions = ImageViewLoadingOptions(), placeholder: Image?) -> ImageTask
	public func nk_cancelLoading()
	public func nk_setImageWith(request: ImageRequest, options: ImageViewLoadingOptions) -> ImageTask
ImageResponse.swift
	case Success(Image, ImageResponseInfo)
	case Failure(ErrorType)
	public var image: Image?
	public var info: ImageResponseInfo?
	public var error: ErrorType?
	public var isSuccess: Bool
	public init(fastResponse: Bool, userInfo: Any? = nil)
ImageMemoryCache.swift
	public func responseForKey(key: ImageRequestKey) -> ImageCachedResponse?
	public func setResponse(response: ImageCachedResponse, forKey key: ImageRequestKey)
	public func removeResponseForKey(key: ImageRequestKey)
ImageLoadingViewExtensions.swift
	public var nk_image: NSImage?
ImageManager.swift
	public struct ImageManagerConfiguration
	public var loader: ImageLoading
	public var cache: ImageMemoryCaching?
	public let configuration: ImageManagerConfiguration
	public init(configuration: ImageManagerConfiguration)
	public func loader(loader: ImageLoading, task: ImageTask, didUpdateProgress progress: ImageTaskProgress)
	public func loader(loader: ImageLoading, task: ImageTask, didCompleteWithImage image: Image?, error: ErrorType?, userInfo: Any?)
	public func isEqual(lhs: ImageRequestKey, to rhs: ImageRequestKey) -> Bool
ImageTask.swift
	case Suspended, Running, Cancelled, Completed
	case Suspended, Running, Cancelled, Completed
	case Suspended, Running, Cancelled, Completed
	case Suspended, Running, Cancelled, Completed
	public internal(set) var response: ImageResponse?
	public var hashValue: Int { return self.identifier }
	public init(request: ImageRequest, identifier: Int)
	public func ==(lhs: ImageTask, rhs: ImageTask) -> Bool
ImageManagerExtensions.swift
	func taskWith(URL: NSURL, completion: ImageTaskCompletion? = nil) -> ImageTask
	func taskWith(request: ImageRequest, completion: ImageTaskCompletion?) -> ImageTask
ImageLoader.swift
	public struct ImageLoaderConfiguration
	public var dataLoader: ImageDataLoading
	public var decoder: ImageDecoding
	public func decompressorFor(request: ImageRequest) -> ImageProcessing?
	public init() {}
	public weak var manager: ImageLoadingManager?
	public let configuration: ImageLoaderConfiguration
	public func resumeLoadingFor(task: ImageTask)
	public func suspendLoadingFor(task: ImageTask)
	public func cancelLoadingFor(task: ImageTask)
	public func isCacheEquivalent(lhs: ImageRequest, to rhs: ImageRequest) -> Bool
	public func invalidate()
	public func removeAllCachedImages()
	public func isEqual(lhs: ImageRequestKey, to rhs: ImageRequestKey) -> Bool
ImageViewLoadingController.swift
	public init(handler: (ImageTask, ImageResponse, ImageViewLoadingOptions) -> Void)
	public func setImageWith(request: ImageRequest, options: ImageViewLoadingOptions) -> ImageTask
	public func setImageWith(task: ImageTask, options: ImageViewLoadingOptions) -> ImageTask
ImageDataLoader.swift
	public private(set) var session: NSURLSession!
	public func taskWith(request: ImageRequest, progress: ImageDataLoadingProgress, completion: ImageDataLoadingCompletion) -> NSURLSessionTask
	public func URLSession(session: NSURLSession, dataTask: NSURLSessionDataTask, didReceiveData data: NSData)
	public func URLSession(session: NSURLSession, task: NSURLSessionTask, didCompleteWithError error: NSError?)
ImageProcessor.swift
	public func process(image: Image) -> Image?
	public func ==(lhs: ImageProcessorWithClosure, rhs: ImageProcessorWithClosure) -> Bool
ImageDecoder.swift
	func decode(data: NSData, response: NSURLResponse?) -> Image?
ImageRequestKey.swift
	public init(_ request: ImageRequest, owner: ImageRequestKeyOwner)
	public override var hash: Int
	public override func isEqual(other: AnyObject?) -> Bool
